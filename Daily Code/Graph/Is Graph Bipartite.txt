 Is Graph Bipartite?

There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:

There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

class Solution {
    public boolean isBipartite(int[][] graph) {
      
        int[] colors = new int[graph.length];
        Arrays.fill(colors, -1);
        for(int u = 0; u < graph.length; u++){
            if(colors[u] == -1){
                if(!dfs(u, graph, colors, 1)){
                    return false;
                }
            }
        }
        return true;
    }
    
    public boolean dfs(int u, int[][]graph, int[]colors, int col){
        if (colors[u] == 1 - col){
            return false; 
        } 
        if (colors[u] == col) {
            return true; 
        }
        colors[u] = col;
        for (var neighbor: graph[u]) {
            if (!dfs(neighbor, graph, colors, 1 - col)) {
                return false;
            }
        }
        return true;  
    }
}