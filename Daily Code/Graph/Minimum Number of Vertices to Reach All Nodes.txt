
Minimum Number of Vertices to Reach All Nodes

Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.


class Solution {
    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
       List<Integer>[]g = new ArrayList[n];

       for(int i =0;i < n; i++)
       g[i] =  new ArrayList<>();

       int []isDegree = new int[n];
       for(List<Integer>e : edges)
       {
           g[e.get(0)].add(e.get(1));
           isDegree[e.get(1)]++;
       }
       List<Integer>result = new ArrayList<>();
       for(int i = 0; i < n; i++)
       {
           if(isDegree[i] == 0)
            result.add(i);
       }
        return result;
    }
}