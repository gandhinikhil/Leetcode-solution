Evaluate Division


You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.

You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.

Return the answers to all queries. If a single answer cannot be determined, return -1.0.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.


class Solution {

    public double[] calcEquation(List<List<String>> equations, 
                                 double[] values, 
                                 List<List<String>> queries) {
        
        double output[] = new double[queries.size()];
        Map<String,Set<String>> graph = new HashMap<>();
        Map<String,Double> costGraph = new HashMap<>();
        
        
        for(int i=0;i<equations.size();i++) {
            
            List<String> eq = equations.get(i);
            costGraph.put(eq.get(0)+"_"+eq.get(1),values[i]);
            costGraph.put(eq.get(1)+"_"+eq.get(0),1/values[i]);
            String a = eq.get(0);
            String b = eq.get(1);
            Set<String> adjSet = graph.getOrDefault(a,new HashSet<>());
            adjSet.add(b);
            graph.put(a,adjSet);
            
            adjSet = graph.getOrDefault(b,new HashSet<>());
            adjSet.add(a);
            graph.put(b,adjSet);
            
        }

        for(int i=0;i<queries.size();i++) {
            List<String> q = queries.get(i);
            if(graph.get(q.get(0))==null || graph.get(q.get(1))==null) {
                output[i] = -1d;
            }else if(costGraph.get(q.get(0)+"_"+q.get(1))!=null) {
                output[i]=costGraph.get(q.get(0)+"_"+q.get(1));
            }else if(q.get(0).equals(q.get(1))){
                output[i]=1d;            
            }else {
                Double output2 = getCost(q.get(0),q.get(1),graph,costGraph,new HashSet<>(),1d);
                output[i]=output2==null?-1:output2;
            }
            
        }
        return output;
    }
    
    Double getCost(String a,
                   String b,
                   Map<String,Set<String>> graph,
                   Map<String,Double> costGraph,
                   Set<String> set,
                   double output) {        
        set.add(a);
        
        Set<String> adjSet = graph.getOrDefault(a,new HashSet<>());
        
        for(String next:adjSet) {
            if(!set.contains(next)) {
                output=output*costGraph.get(a+"_"+next);
                if(next.equals(b)) {
                    return output;
                }
                
                Double output2 = getCost(next,b,graph,costGraph,set,output);
                if(output2!=null)
                    return output2;
                else {
                    output=output/costGraph.get(a+"_"+next);
                }
            }
        }
        return null;
    }
}